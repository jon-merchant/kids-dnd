<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function ($scope, spUtil, $uibModal) {
	/* widget controller */
	var c = this;
	$scope.roller = {
		showDex: false,
		showWisdom: false,
		showStrength: false
	}



	//This should update if the record changes in real time
	spUtil.recordWatch($scope, "x_0478_kids_dungeo_character_card", "active=true", function (name, data) {
		spUtil.update($scope);
	});

	$scope.getCharacterImg = function (charType) {
		//console.log(charType);
		//need to grab the image and display it.
		c.resetImageSelection();
		$scope.character.strength = '';
		$scope.character.wisdom = '';
		$scope.character.dexterity = '';
		c.data.show_image = charType;

		c.server.update().then(function (response) {
			c.data.show_image = undefined;

		});
	}

	$scope.generateName = function () {
		c.data.get_name = true;
		c.server.update().then(function (response) {
			c.data.get_name = undefined;

			$scope.character.name = response.character_name;

		});
	}

	c.clearRoller = function() {
		$scope.roller = {
			showDex: false,
			showWisdom: false,
			showStrength: false
		}
	}

	$scope.generateAttrib = function (attrib, charClass) {
		c.clearRoller();
		if (attrib == 'strength') {
			$scope.roller.showStrength = true;
		}
		if (attrib == 'dexterity') {
			$scope.roller.showDex = true;
		}
		if (attrib == 'wisdom') {
			$scope.roller.showWisdom = true;
		}
		
		c.data.generateAttrib = true;
		c.data.thisAttrib = attrib;
		c.data.thisAttribClass = charClass;
		c.server.update().then(function (response) {
			//c.data.generateAttrib = undefined;
			//c.data.thisAttrib = undefined;
			//c.data.thisAttribClass = undefined;
			c.clearRoller();
			if (attrib == 'strength') {
				$scope.character.strength = response.character_fighter_roll;
			}
			if (attrib == 'dexterity') {
				$scope.character.dexterity = response.character_ranged_roll;
			}
			if (attrib == 'wisdom') {
				$scope.character.wisdom = response.character_magic_roll;
			}
			//$scope.character[attrib] = response.character[attrib];
		})
	}
	$scope.generateWeapon = function () {
		console.log("clicked");
		c.data.generateWeapon = true;
		c.server.update().then(function (response) {
			console.log(response);
			$scope.character.weapon = response.weapon;
		})
	}

	c.openModal = function (template) {
		if (!template) {
			template = 'kiddsDefaultTemplate';
		}
		c.modalInstance = $uibModal.open({
			templateUrl: template,
			scope: $scope
		});
	}

	c.closeModal = function () {
		$scope.modalData = null;
		c.modalInstance.close();
	}

	c.popImage = function (img) {
		var template = 'kiddsCharImage';
		c.data.modalData = {
			img: img
		}
		c.openModal(template);
	}
	c.selectCharImage = function(img) {
		/**
		* Select one of the images to set for the character
		* @param: img | url
		*/
		c.data.char_images.map(function(element, index, array) {
			if (element.img == img.img) {
				element.selected = true;
			} else {
				element.selected = false;
			}

		});

		$scope.character.image = img;

	}
	c.resetImageSelection = function() {
		if (c.data.char_images) {
			c.data.char_images.map(function(element, index, array) {
				element.selected = false;
			});
		}
		if ($scope.character.image) {
			$scope.character.image = null;
		}
	}
	c.setCharacter = function() {
		c.server.get({
			character: $scope.character,
			action: 'setCharacter'
		}).then(function(response) {
			console.log(response);
		})
	}
	c.resetCharacter = function() {
		c.resetImageSelection();
		$scope.character = {};
		
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.step-class-letter {
  color: #fff;
  margin-top: -2px;
}

.card {
  background-color: lighten($color: #cec2ae, $amount: 15);
  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.75);
  display: inline-block;
  margin: 10px 5px;
  width: 150px;
  height: 200px;
  border-radius: 4px;

  &amp;:first-child {
    margin-left: 0px;
  }

  &amp;:last-child {
    margin-right: 0px;
  }

  &amp;:hover {
    box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.95);
  }
}
.card.selected {
  box-shadow: 0px 0px 5px 0px rgba(163, 76, 80, 0.95);
  &amp;&gt;.card-options {
    &amp;&gt;.col-sm-6:last-child {
      background-color: #a34c50;
      color: #fff;
    }
  }
}

.card-img {
  border-radius: 4px 4px 0 0;
  background-position: top center;
  background-repeat: no-repeat;
  background-size: cover;
  display: inline-block;
  height: 150px;
  width: 100%;
}

.card-options {
  border-top: 1px solid;
  border-color: darken($color: #cec2ae, $amount: 15);
  width: 150px;
  margin-top: -5px;
  &amp; &gt; .col-sm-6 {
    padding: 14px 0px;  
    &amp;:first-child {
      border-right: 1px solid;
      
    }
    &amp;:hover {
      background-color: #a34c50;
      color: #fff;
    }
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>kidds-character-picker</id>
        <internal>false</internal>
        <link/>
        <name>Character Picker</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	
	function checkUndefinded(vari) {
		if (typeof vari != 'undefined') {
			vari = "";
		}
		
		return vari;
	}
	
	

//var roll = rollDice(6,4);
//console.log(roll);
	
	function checkAttrib(attrib,charType) {
		var mods = {};
		var lowerChar = charType.toLowerCase();
		
		if (lowerChar == "magic" && attrib == "wisdom") {
			mods.magic = parseInt(10);
		}
		if (lowerChar == "fighter" && attrib == "strength") {
			mods.fighter = parseInt(10);
		}
		if (lowerChar == "ranged" && attrib == "dexterity"){
			mods.ranged = parseInt(10);
		}
				
		return mods
				
	}
	
	
	
	/*function getCharImage(charType) {
		var img = "https://placehold.it/184x284?text=N/A";
		//https://dev16833.service-now.com/80723a2b6f2e2200432530767b3ee438.iix
		var gr = new GlideRecord('x_0478_kids_dungeo_character_image');
		gr.addEncodedQuery('character_class='+charType+'^active=true');
		gr.orderByDesc('sys_created_on');
		gr.setLimit(1);
		gr.query();
		if (gr.next()) {
			//$sp.log(gr.sys_id);
			var gr2 = new GlideRecord('sys_attachment');
			gr2.addEncodedQuery('table_sys_id='+gr.sys_id+'^table_nameLIKEZZ_YYx_0478_kids_dungeo_character_image');
			gr2.query();
			if (gr2.next()) {
				img = "/"+gr2.sys_id+".iix";
			}
			
		}
		
		return img;
	}*/
	function getRandom(min,max) {
		//should be moved to a script include
		min = Math.ceil(min);
		max = Math.floor(max);
		return Math.round(Math.floor(Math.random() * (max - min)) + min); //The maximum is exclusive and the minimum is inclusive
	}
	function getWeapon() {
		
		var weapons = [];
		var gr = new GlideRecord('x_0478_kids_dungeo_character_items');
		gr.addQuery('minimum_level','1');
		gr.addQuery('item_type','weapon');
		gr.query();
		var wc = gr.getRowCount();
		while(gr.next()) {
			$sp.log(gr.getDisplayValue('item_name'));
			weapons.push({'sys_id':gr.getUniqueValue(),'name':gr.getDisplayValue('item_name')});	
		}
		
		var w = getRandom(0,wc);
		$sp.log(w);
		var weapon = {
			'random':w,
			'weapons':weapons,
			'picked':weapons[w]
		}
		return weapon;
	}
	
	data.char_class = [];
	//get the different classes v1 = 3
	
	var gr = new GlideRecord('sys_choice');
	gr.addEncodedQuery('name=x_0478_kids_dungeo_character_card^element=u_choice_1^inactive=false');
	gr.orderBy('name');
	gr.query();
	while(gr.next()) {
		data.char_class.push({'value':gr.getValue('sys_id'),'label':gr.getValue('label')});
	}
	
	data.title = "Character Class";
	
	
	//talk back
	var kiddsUtils = new x_0478_kids_dungeo.kiddsUtils();
	if (input && input.show_image) {
		$sp.log(input.show_image.label);
		//now we need to grab the images
		data.char_images = kiddsUtils.getCharImageSelectorList(input.show_image.value);
	}
	
	if (input && input.get_name == true) {
		//$sp.log(input.get_name);
		var cName = kiddsUtils.getCharName();
		//$sp.log(cName);
		data.character_name = cName;
	} 
	
	if (input && input.generateAttrib) {
		//value should be one of the attribs
		$sp.log(input.thisAttrib);
		$sp.log(input.thisAttribClass);
		$sp.log(data);
		//need to check which mod to add too
		var chr = kiddsUtils.getCharAttributes(input);
		if (input.thisAttrib == 'wisdom') {
			data.character_magic_roll = chr.character_magic_roll;
		}
		if (input.thisAttrib == 'strength') {
			data.character_fighter_roll = chr.character_fighter_roll;
		}
		if (input.thisAttrib == 'dexterity') {
			data.character_ranged_roll = chr.character_ranged_roll;
		}
		
		data.generateAttrib = false;
	}
	
	if (input && input.generateWeapon) {
		
		var weapon = getWeapon();
		data.weapon = weapon;
	}
	if (input && input.action == 'setCharacter') {
		
	}
	

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-10-24 23:50:54</sys_created_on>
        <sys_id>780a8a6f6fea2200432530767b3ee41e</sys_id>
        <sys_mod_count>395</sys_mod_count>
        <sys_name>Character Picker</sys_name>
        <sys_package display_value="Kids Dungeons &amp; Dragons" source="x_0478_kids_dungeo">7901202f6f2a2200432530767b3ee440</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kids Dungeons &amp; Dragons">7901202f6f2a2200432530767b3ee440</sys_scope>
        <sys_update_name>sp_widget_780a8a6f6fea2200432530767b3ee41e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-28 21:11:15</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  <form name="character">
    <div class="form-group row">
      
    	<label>>1 Character Name:</label>
      <input type="text" ng-model="character.name"  readonly="readonly" class="form-control"/>
      <div style="padding-top: 10px;"><button type="button" class="btn btn-info" ng-click="generateName()">Generate</button></div>  
      
    </div>
    <div class="form-group row" ng-show="character.name">
      
      <label>>2 Character Class:</label>
      <select ng-model="character.class" 
        ng-options="option.label for option in c.data.char_class track by option.value" 
        ng-change='getCharacterImg(character.class)' class="form-control">
        <option style="display:none" value="">Select A Class</option>
      </select>
      <div class="img-selector" ng-show="c.data.char_images">
        <div class="card" ng-class="{'selected': img.selected}" ng-repeat="img in c.data.char_images track by $index">
          <div class="card-img" style="background-image:url({{img.img}});"></div>
          <div class="card-options">
            <div class="col-sm-6 text-center" ng-click="c.popImage(img)">
              <i class="fa fa-eye fa-lg"></i>
            </div>
            <div class="col-sm-6 text-center" ng-click="c.selectCharImage(img)">
              <i class="fa fa-check-square-o fa-lg" aria-hidden="true"></i>
            </div>
          </div>
        </div>
        
      </div>
      <div style="padding-top: 10px;">
        <fieldset class="form-inline">
          <!--<img ng-show="c.data.char_image !== undefined" src="{{c.data.char_image}}" style="float:left; margin-right: 10px;margin-bottom: 20px;"/>-->
          <p ng-show="character.image"><label class="control-label">ATTRIBUTES</label><p>
          <div ng-show="character.image" style="padding-top: 10px;" ><label class="control-label">Strength:</label> <input type="text" ng-model="character.strength" readonly="readonly" class="form-control" style="width: 50px;" value="0"/><button type="button" class="btn btn-info" ng-click="generateAttrib('strength',character.class.label)">Roll</button> <span ng-show="roller.showStrength"><img src="/dice-roll.gif" width="50px"/></span></div>
          <div ng-show="character.image" style="padding-top: 10px;" ><label class="control-label">Dexterity:</label> <input type="text" ng-model="character.dexterity" readonly="readonly" class="form-control" style="width: 50px;" value="0"/><button type="button" class="btn btn-info" ng-click="generateAttrib('dexterity',character.class.label)">Roll</button> <span ng-show="roller.showDex"><img src="/dice-roll.gif" width="50px"/></span></div>
          <div ng-show="character.image" style="padding-top: 10px;" ><label class="control-label">Wisdom:</label> <input type="text" ng-model="character.wisdom" readonly="readonly" class="form-control" style="width: 50px;" value="0"/><button type="button" class="btn btn-info" ng-click="generateAttrib('wisdom',character.class.label)">Roll</button> <span ng-show="roller.showWisdom"><img src="/dice-roll.gif" width="50px"/></span></div>
        </fieldset>
      </div>
      
    </div>
    <div class="form-group row" ng-show="character.strength && character.wisdom && character.dexterity">
      <label>>3 Items</label>
      <p>
        <label class="control-label">Weapon</label>
        <input ng-model="character.weapon.picked.name" readonly="readonly" class="form-control"/>
      
      </p>
      <div style="padding-top: 10px;"><button class="btn btn-info" ng-click="generateWeapon()">Generate</button></div>
    </div>
    <div class="row text-right" ng-show="character.weapon">
      <button class="btn btn-info" ng-click="c.setCharacter()">
        Save
      </button>
      <button class="btn btn-danger" ng-click="c.resetCharacter()">
        Reset
      </button>
    </div>
  </form>
</div>]]></template>
    </sp_widget>
</record_update>
